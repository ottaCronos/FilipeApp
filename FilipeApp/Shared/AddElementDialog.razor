@using Microsoft.AspNetCore.Components
@using FilipeApp.Models
@using FilipeApp.Services
<MudDialog>
    <DialogContent>
    
        <MudGrid Spacing="3" Justify="Justify.Center">
            <MudItem xs="6">
                @* BASICS *@
                <MudText Class="mx-2 mb-5" Typo="Typo.caption"><b>Basics</b></MudText>
                <MudTextField @bind-Value="model.Name" Class="mt-2 mx-2" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                <MudTextField @bind-Value="model.Label" Class="mx-2" Label="Label" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                <MudSelect @bind-Value="model.Type" Class="mx-2" T="string" Label="Type" Strict="true" Variant="Variant.Outlined" Dense="true">
                    <MudSelectItem T="string" Value='"element"'/>
                    <MudSelectItem T="string" Value='"concept"'/>
                    <MudSelectItem T="string" Value='"people"'/>
                    <MudSelectItem T="string" Value='"region"'/>
                    <MudSelectItem T="string" Value='"country"'/>
                    <MudSelectItem T="string" Value='"project"'/>
                    <MudSelectItem T="string" Value='"publication"'/>
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                @* METADATA *@
                <MudText Class="mx-2 mb-3" Typo="Typo.caption"><b>Meta</b></MudText>
                <MudTextField @bind-Value="model.Description" Class="mt-2 mx-2" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                @if (model.IconImported)
                {
                    <MudButton Class="mx-2" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Success">Icon imported</MudButton>
                }
                else
                {
                    <MudButton Class="mx-2" Size="Size.Small" Variant="Variant.Outlined" OnClick="ImportIcon">Import Icon</MudButton>
                }
                @if (model.ImageImported)
                {
                    <MudButton Class="mx-2" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Success">Image imported</MudButton>
                }
                else
                {
                    <MudButton Class="mx-2" Size="Size.Small" Variant="Variant.Outlined" OnClick="ImportImage">Import Image</MudButton>
                }
                <MudTextField @bind-Value="model.Link" Class="mx-2" Label="Link" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            @if (model.LinkedElements != null && model.LinkedElements.Count > 0)
            {
                <MudItem xs="12">
                    <MudList Clickable="true">
                        <MudListSubheader>
                            Linked elements
                        </MudListSubheader>
                        @foreach (var item in model.LinkedElements) {
                            <MudListItem>@item</MudListItem>
                        }
                    </MudList>
                </MudItem>
            }
            <MudItem xs="12">
                <MudText Class="mx-2" Typo="Typo.caption"><b>Add linked element</b></MudText>
                <MudSelect @bind-Value="selectedElement" Class="mx-2" T="string" Label="Elements" Strict="true" Variant="Variant.Outlined" Dense="true">
                    @foreach (var item in Global.PlacedItems) {
                        <MudSelectItem T="string" Value="@item.name"/>
                    }
                </MudSelect>
                @if (!string.IsNullOrEmpty(selectedElement)) {
                    <MudButton Class="mx-2" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default" OnClick="LinkElement">Link this element</MudButton>
                } else {
                    <MudButton Class="mx-2" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default" Disabled="true">Link this element</MudButton>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Add</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public PlacedItem DefaultElement { get; set; }
    
    ElementSubmit model = new();
    string selectedElement;
    public bool IsExpanded { get; set; } = true;

    protected override void OnParametersSet()
    {
        if (DefaultElement != null)
        {
            Console.WriteLine("Default element not null.");
            try
            {
                model.Name = DefaultElement.name;
                model.Description = DefaultElement.metadata.description;
                model.Icon = DefaultElement.metadata.icon.large;
                model.Image = DefaultElement.metadata.images[0].url;
                model.Label = DefaultElement.label;
                model.Link = DefaultElement.metadata.link;
                model.LinkedElements = DefaultElement.all_linked_node;
                model.Type = DefaultElement.type;
                if (!string.IsNullOrEmpty(model.Image))
                    model.ImageImported = true;
                if (!string.IsNullOrEmpty(model.Icon))
                    model.IconImported = true;
                Snackbar.Add("Element data imported. Switched to edition mode.");
            } catch (Exception ex)
            {
                Console.WriteLine($"An error has occured when attempting to edit element : {ex}");
            }
        }else { Console.WriteLine("Default element is null.");}
    }

    void LinkElement()
    {
        if(!model.LinkedElements.Contains(selectedElement))
            model.LinkedElements.Add(selectedElement);
        StateHasChanged();
    }
    
    void Submit()
    {
        var item = new PlacedItem()
        {
            name = model.Name, label = model.Label, type = model.Type, all_linked_node = model.LinkedElements,
            metadata = new() {
                description = model.Description, icon = new() { large = model.Icon, small = model.Icon },
                link = model.Link, images = new []{ new NodeMedia() { url = model.Image }}
            }
        };
        DataService.AddItem(item);
        Snackbar.Add("Modifications saved on the server !", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
    
    
    async void ImportIcon()
    {
        var dialog = DialogService.Show<ImageImportDialog>();
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            model.Icon = result.Data.ToString();
            model.IconImported = true;
            StateHasChanged();
        }
    }
    
    async void ImportImage()
    {
        var dialog = DialogService.Show<ImageImportDialog>();
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            model.Image = result.Data.ToString();
            model.ImageImported = true;
            StateHasChanged();
        }
    }
    
}